{"version":3,"sources":["Components/Searchbar.js","Components/apis.js","Components/SingleVideo.js","Components/ListVideos.js","Components/VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchvalue","onChangeHandler","e","setState","target","value","handleSubmit","preventDefault","props","onFormSubmit","className","onSubmit","this","type","onChange","Component","axios","create","baseURL","params","part","maxResults","key","SingleVideo","video","onClick","onVideoSelect","style","marginBottom","src","snippet","thumbnails","medium","url","color","title","ListVideos","videos","map","i","VideoDetail","id","videoId","description","App","SelectedVideo","onSearchSubmit","a","apis","get","q","res","data","items","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wTAGqBA,G,kNAEjBC,MAAQ,CACJC,YAAa,I,EAGjBC,gBAAkB,SAACC,GACf,EAAKC,SAAS,CAACH,YAAaE,EAAEE,OAAOC,S,EAGzCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,aAAa,EAAKV,MAAMC,c,uDAInC,OACJ,yBAAKU,UAAU,yBACf,0BAAOC,SAAUC,KAAKN,aAAcI,UAAU,WAC1C,yBAAKA,UAAU,SACX,4CACA,2BAAOG,KAAK,OACZR,MAAOO,KAAKb,MAAMC,YAClBc,SAAUF,KAAKX,yB,GAvBYc,c,QCCxBC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,wCACTC,OAAQ,CACJC,KAAM,UACNP,KAAM,QACNQ,WAAY,GACZC,IARI,6CCyBGC,G,6KAtBD,IAAD,OACCC,EAAQZ,KAAKJ,MAAMgB,MAEzB,OACI,yBAAKd,UAAU,UAAUe,QAAS,WAAO,EAAKjB,MAAMkB,cAAcF,KAC9D,yBAAKd,UAAU,QACP,uBAAGA,UAAU,WAAWiB,MAAO,CAACC,aAAc,SAC9C,yBAAKC,IAAKL,EAAMM,QAAQC,WAAWC,OAAOC,OAG9C,yBAAKvB,UAAU,UAAUiB,MAAO,CAACC,aAAc,SAC3C,uBAAGlB,UAAU,qBAAqBiB,MAAO,CAACO,MAAO,aAAcV,EAAMM,QAAQK,QAKjF,mC,GAlBMpB,cCALqB,E,uKACP,IAAD,OAEL,OADexB,KAAKJ,MAAM6B,OAEfC,KAAI,SAACd,EAAOe,GACjB,OAAO,kBAAC,EAAD,CAAajB,IAAKiB,EAAGf,MAAOA,EAAOE,cAAe,EAAKlB,MAAMkB,uB,GAL1CX,aCmCzByB,E,uKA/BP,IAAMhB,EAAQZ,KAAKJ,MAAMgB,MAEzB,OAEI,6BASKA,EAGA,oCACD,yBAAKd,UAAU,YACf,4BAAQmB,IAAG,wCAAmCL,EAAMiB,GAAGC,YAEvD,2BAAIlB,EAAMM,QAAQa,cALhB,yD,GApBQ5B,aCoDX6B,E,4MA7Cb7C,MAAQ,CACNsC,OAAQ,GACRQ,cAAe,M,EAGjBC,e,uCAAiB,WAAO9C,GAAP,eAAA+C,EAAA,sEACEC,EAAKC,IAAI,UAAW,CACnC9B,OAAQ,CACN+B,EAAGlD,KAHQ,OACVmD,EADU,OAOf,EAAKhD,SAAS,CACZkC,OAAQc,EAAIC,KAAKC,MACjBR,cAAeM,EAAIC,KAAKC,MAAM,KATjB,2C,wDAajB3B,cAAe,SAACF,GACd,EAAKrB,SAAS,CAAC0C,cAAerB,K,uDAK9B,OADA8B,QAAQC,IAAI3C,KAAKb,MAAMsC,QAErB,yBAAK3B,UAAU,kBACb,yBAAKA,UAAU,gBACf,kBAAC,EAAD,CAAWD,aAAcG,KAAKkC,iBAC9B,yBAAKpC,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACf,kBAAC,EAAD,CAAac,MAAOZ,KAAKb,MAAM8C,iBAE/B,yBAAKnC,UAAU,oBACf,kBAAC,EAAD,CAAY2B,OAAQzB,KAAKb,MAAMsC,OAAQX,cAAed,KAAKc,yB,GApCrDX,aCKEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.e12d3198.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nexport default class SearchBar extends Component {\r\n\r\n    state = {\r\n        searchvalue: ''\r\n    }\r\n\r\n    onChangeHandler = (e) => {\r\n        this.setState({searchvalue: e.target.value});\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onFormSubmit(this.state.searchvalue)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n    <div className=\"search-bar ui segment\">\r\n    <form  onSubmit={this.handleSubmit} className=\"ui form\">\r\n        <div className=\"field\">\r\n            <label>SEARCH...</label>\r\n            <input type=\"text\" \r\n            value={this.state.searchvalue}\r\n            onChange={this.onChangeHandler}\r\n            />\r\n        </div>\r\n    </form>\r\n    </div>\r\n   )\r\n    }\r\n}","\r\nimport axios from 'axios';\r\nconst KEY = 'AIzaSyA4-CkRCnfCBckhFn7v6EoMile5YnCuCTw'\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://www.googleapis.com/youtube/v3',\r\n    params: {\r\n        part: 'snippet',\r\n        type: 'video',\r\n        maxResults: 10,\r\n        key: KEY\r\n    }\r\n})","import React, { Component } from 'react';\r\nimport './SingleVideo.css';\r\n\r\nclass SingleVideo extends Component {\r\n    \r\n    render() {\r\n        const video = this.props.video\r\n        \r\n        return (    \r\n            <div className=\"ui item\" onClick={() => {this.props.onVideoSelect(video)}}>\r\n                <div className=\"item\">\r\n                        <a className=\"ui image\" style={{marginBottom: \"10px\"}}>\r\n                        <img src={video.snippet.thumbnails.medium.url}/>\r\n                        </a>\r\n                        \r\n                    <div className=\"content\" style={{marginBottom: \"10px\"}}>\r\n                        <a className=\"header line-height\" style={{color: \"DarkCyan\"}}>{video.snippet.title}</a>\r\n                        {/* <div className=\"description\" style={{color: \"LightSlateGrey\"}}>\r\n                            <p>{video.snippet.description}</p>\r\n                        </div> */}\r\n                    </div>\r\n                    <hr />\r\n            </div>\r\n            </div>\r\n         );\r\n        }\r\n    } \r\nexport default SingleVideo;","import React, {Component} from 'react';\r\nimport SingleVideo from './SingleVideo';\r\n\r\nexport default class ListVideos extends Component {\r\n    render() {\r\n        const videos = this.props.videos\r\n        return (\r\n            videos.map((video, i) => {\r\n              return <SingleVideo key={i} video={video} onVideoSelect={this.props.onVideoSelect}/>\r\n            })\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nclass VideoDetail extends Component {\r\n\r\n   \r\n    render() { \r\n       \r\n        const video = this.props.video\r\n        // const videoSrc = 'https://www.youtube.com/embed/' + video.id.videoId\r\n        return (\r\n            \r\n            <div>\r\n                {/* {\r\n                video === {}\r\n                ? <p>Loading.. Frame</p>\r\n                : <div className=\"ui embed\">\r\n                    <iframe src={`https://www.youtube.com/embed/${video.id.videoId}`} />\r\n                </div>\r\n                } */}\r\n                {\r\n                !video\r\n                // ? <div>Loading....</div>\r\n                ? <div>Search Something...</div>\r\n                :<>\r\n                <div className=\"ui embed\">\r\n                <iframe src={`https://www.youtube.com/embed/${video.id.videoId}`} />\r\n                </div>\r\n                <p>{video.snippet.description}</p>\r\n                </>\r\n                // : <div style={{color: \"DarkCyan\"}}>{video.snippet.title}</div>\r\n            }\r\n            </div>\r\n                \r\n           \r\n         );\r\n    }\r\n}\r\n \r\nexport default VideoDetail;","import React, {Component} from 'react';\nimport './App.css';\nimport SearchBar from './Components/Searchbar';\nimport apis from './Components/apis';\nimport ListVideos from './Components/ListVideos';\nimport VideoDetail from './Components/VideoDetail';\n\nclass App extends Component {\n\n  state = {\n    videos: [],\n    SelectedVideo: null\n  }\n\n  onSearchSubmit = async (searchvalue) => {\n   const res = await apis.get('/search', {\n      params: {\n        q: searchvalue\n      }\n    });\n\n    this.setState({\n      videos: res.data.items,\n      SelectedVideo: res.data.items[0]\n    })\n  };\n\n  onVideoSelect =(video)=> {\n    this.setState({SelectedVideo: video})\n  }\n\n  render() {\n    console.log(this.state.videos)\n    return (\n      <div className=\"App App-header\">\n        <div className=\"ui container\">\n        <SearchBar onFormSubmit={this.onSearchSubmit}/>\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n            <VideoDetail video={this.state.SelectedVideo} />\n            </div>\n            <div className=\"five wide column\">\n            <ListVideos videos={this.state.videos} onVideoSelect={this.onVideoSelect}/>\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n    )\n  }  \n}\n  \n\nexport default App\n    \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}